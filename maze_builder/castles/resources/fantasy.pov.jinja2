#version 3.7;
#include "colors.inc"
#include "stones2.inc"
#include "textures.inc"
background { color Black }

#declare HEIGHT=3.5;
#declare FENCE=1.0;
#declare R1=seed(1);
#declare RT=seed({{ seed }});
#declare WALL=0.25;
#declare HALL=1-2*WALL;
#declare STAIRCOUNT = 5;
#declare WIND=rand(RT);
#declare LARGE=10;

camera {
    right x*image_width/image_height // Square pixels
    rotate <20-40*rand(RT), 0, 0>
    location <10, 10, 10>
    look_at  <1, 1, 1>
    focal_point <3, 3, 3>
    aperture 30*rand(RT)
}
light_source { <-30, 200, 140> color White }

global_settings {
    assumed_gamma 1.0
    radiosity {
      pretrace_start 0.08
      pretrace_end   0.01
      count 150
      nearest_count 10
      error_bound 0.5
      recursion_limit 3
      low_error_factor 0.5
      gray_threshold 0.0
      minimum_reuse 0.005
      maximum_reuse 0.2
      brightness 1
      adc_bailout 0.005
    }
  }

sky_sphere {
  pigment {
    gradient y
      color_map {
        [ 0.5  color SkyBlue ]
        [ 1.0  color MidnightBlue ]
        }
    scale 2
    translate -1
    }
  emission rgb <0.8,0.8,1>
  }
  // declare rainbow's colors
  #declare r_violet1 = color rgbf<1.0, 0.5, 1.0, 1.0>;
  #declare r_violet2 = color rgbf<1.0, 0.5, 1.0, 0.8>;
  #declare r_indigo  = color rgbf<0.5, 0.5, 1.0, 0.8>;
  #declare r_blue    = color rgbf<0.2, 0.2, 1.0, 0.8>;
  #declare r_cyan    = color rgbf<0.2, 1.0, 1.0, 0.8>;
  #declare r_green   = color rgbf<0.2, 1.0, 0.2, 0.8>;
  #declare r_yellow  = color rgbf<1.0, 1.0, 0.2, 0.8>;
  #declare r_orange  = color rgbf<1.0, 0.5, 0.2, 0.8>;
  #declare r_red1    = color rgbf<1.0, 0.2, 0.2, 0.8>;
  #declare r_red2    = color rgbf<1.0, 0.2, 0.2, 1.0>;
  // create the rainbow
  rainbow {
    angle 42.5
    width 5
    distance 1.0e5
    direction vrotate(<-0.2, -0.2, 1>, <0, 360*rand(RT), 0>)
    jitter 0.01
    color_map {
      [0.000  color r_violet1]
      [0.100  color r_violet2]
      [0.214  color r_indigo]
      [0.328  color r_blue]
      [0.442  color r_cyan]
      [0.556  color r_green]
      [0.670  color r_yellow]
      [0.784  color r_orange]
      [0.900  color r_red1]
    }
  }
#declare DefaultTexture = texture { T_Stone34 scale 0.15 }

#declare HighlightPigment = pigment { rgb CHSV2RGB(<360*rand(RT), 1.0, 1.0>) }

plane { y, 0 texture { DefaultTexture } }

#if (rand(RT) < 0.50)
    plane { y, HEIGHT*rand(RT) texture { Water } }
#end

#declare STAIR = union {
    #local xmax=0.5-WALL;
    #local ymax=HEIGHT+0.75*WALL;
    #local zmax=WALL/2;

    cylinder { <0, 0, -zmax>, <xmax, ymax, -zmax>, 0.02 }
    cylinder { <0, 0, +zmax>, <xmax, ymax, +zmax>, 0.02 }
    cylinder {
        <xmax * (1 - 1 / 20), ymax * (1 - 1 / 20), -zmax>,
        <xmax * (1 - 1 / 20), ymax * (1 - 1 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 2 / 20), ymax * (1 - 2 / 20), -zmax>,
        <xmax * (1 - 2 / 20), ymax * (1 - 2 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 3 / 20), ymax * (1 - 3 / 20), -zmax>,
        <xmax * (1 - 3 / 20), ymax * (1 - 3 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 4 / 20), ymax * (1 - 4 / 20), -zmax>,
        <xmax * (1 - 4 / 20), ymax * (1 - 4 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 5 / 20), ymax * (1 - 5 / 20), -zmax>,
        <xmax * (1 - 5 / 20), ymax * (1 - 5 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 6 / 20), ymax * (1 - 6 / 20), -zmax>,
        <xmax * (1 - 6 / 20), ymax * (1 - 6 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 7 / 20), ymax * (1 - 7 / 20), -zmax>,
        <xmax * (1 - 7 / 20), ymax * (1 - 7 / 20), +zmax>, 0.02
    }
    texture { Cherry_Wood }
}

#macro MakeWallX (X, Y, Z)
    box {
        <-WALL, +0, -WALL>, <+1+WALL, +HEIGHT, +WALL>
        texture { DefaultTexture }
        translate <X, Z, Y>
    }
#end

#macro MakeWallY (X, Y, Z)
    box {
        <-WALL, +0, -WALL>, <+WALL, +HEIGHT, +1+WALL>
        texture { DefaultTexture }
        translate <X, Z, Y>
    }
#end

#macro MakeArchX (X, Y, Z)
    difference {
        cylinder {
            <+0.5, +HEIGHT-0.2-HALL/2, -WALL>,
            <+0.5, +HEIGHT-0.2-HALL/2, +WALL>, HALL/2+WALL*1.5
        }
        cylinder {
            <+0.5, +HEIGHT-0.2-HALL/2, -WALL*1.1>,
            <+0.5, +HEIGHT-0.2-HALL/2, +WALL*1.1>, HALL/2
        }
        plane {
            y, +HEIGHT-0.2-HALL/2
        }

        texture { DefaultTexture }
        translate <X, Z, Y>
    }
#end

#macro MakeArchY (X, Y, Z)
    difference {
        cylinder {
            <-WALL, +HEIGHT-0.2-HALL/2, +0.5>,
            <+WALL, +HEIGHT-0.2-HALL/2, +0.5>, HALL/2+WALL*1.5
        }
        cylinder {
            <-WALL*1.1, +HEIGHT-0.2-HALL/2, +0.5>,
            <+WALL*1.1, +HEIGHT-0.2-HALL/2, +0.5>, HALL/2
        }
        plane {
            y, +HEIGHT-0.2-HALL/2
        }

        texture { DefaultTexture }
        translate <X, Z, Y>
    }
#end

#macro MakeOpenX (X, Y, Z)
#end

#macro MakeOpenY (X, Y, Z)
#end

#macro MakeBlockX (X, Y, Z)
    box { <X-WALL, Z+0, Y-WALL>, <X+WALL, Z+HEIGHT, Y+WALL> texture { DefaultTexture } }
    box { <X+0.15, Z+0, Y-0.05>, <X+0.25, Z+FENCE, Y+0.05> texture { DefaultTexture } }
    box { <X+0.35, Z+0, Y-0.05>, <X+0.45, Z+FENCE, Y+0.05> texture { DefaultTexture } }
    box { <X+0.55, Z+0, Y-0.05>, <X+0.65, Z+FENCE, Y+0.05> texture { DefaultTexture } }
    box { <X+0.75, Z+0, Y-0.05>, <X+0.85, Z+FENCE, Y+0.05> texture { DefaultTexture } }
    box { <X+1-WALL, Z+0, Y-WALL>, <X+1+WALL, Z+HEIGHT, Y+WALL> texture { DefaultTexture } }
#end

#macro MakeBlockY (X, Y, Z)
    box { <X-WALL, Z+0, Y-WALL>, <X+WALL, Z+HEIGHT, Y+WALL> texture { DefaultTexture } }
    box { <X-0.05, Z+0, Y+0.15>, <X+0.05, Z+FENCE, Y+0.25> texture { DefaultTexture } }
    box { <X-0.05, Z+0, Y+0.35>, <X+0.05, Z+FENCE, Y+0.45> texture { DefaultTexture } }
    box { <X-0.05, Z+0, Y+0.55>, <X+0.05, Z+FENCE, Y+0.65> texture { DefaultTexture } }
    box { <X-0.05, Z+0, Y+0.75>, <X+0.05, Z+FENCE, Y+0.85> texture { DefaultTexture } }
    box { <X-WALL, Z+0, Y+1-WALL>, <X+WALL, Z+HEIGHT, Y+1+WALL> texture { DefaultTexture } }
#end

#declare SpireRadius=0.6;
#declare SpireDoorHeight=0.5;
#declare SpireDoorHeightTotal=SpireDoorHeight+WALL;

#macro MakeSpireDoor(MaxSize)
    union {
        box { <-MaxSize, 0, -WALL>, <+MaxSize, +SpireDoorHeight, +WALL> }
        cylinder { <-MaxSize, +SpireDoorHeight, 0>, <+MaxSize, +SpireDoorHeight, 0>, WALL }
    }
#end


//You must intersect this with what you're interested in
#if (rand(RT) < 0.5)
    #macro MakeSpireDoorPerch(MaxSize)
        box { <-MaxSize, 0, -WALL*1.2>, <+MaxSize, -WALL, +WALL*1.2> }
    #end
#else
    #macro MakeSpireDoorPerch(MaxSize)
        cylinder { <-MaxSize, -WALL, 0>, <+MaxSize, -WALL, 0>, WALL }
    #end
#end

#macro MakeSpire (X, Y, Z)

    #local spire = HEIGHT + 1 + 1.5*HEIGHT*rand(R1);
    #local notch = SpireDoorHeight;

    union {
        union { // tower
            difference {
                cone { 0, SpireRadius+WALL, <0, spire, 0>, SpireRadius-WALL }
                object {
                    MakeSpireDoor(SpireRadius+WALL)
                    translate <0, HEIGHT, 0>
                }
                object {
                    MakeSpireDoor(SpireRadius+WALL)
                    translate <0, HEIGHT, 0>
                    rotate<0, 90, 0>
                }
                #local SpireDoorSpace = (spire - SpireDoorHeightTotal - WALL) - (HEIGHT + SpireDoorHeightTotal);
                #if (rand(R1) < 0.75 & rand(R1) < SpireDoorSpace)
                    #local SpireDoorHeightZ = HEIGHT + SpireDoorHeightTotal + rand(R1) * SpireDoorSpace;
                    #local SpireDoorRotation = 180 * rand(R1);
                    object {
                        MakeSpireDoor(SpireRadius+WALL)
                        translate <0, SpireDoorHeightZ, 0>
                        rotate <0, SpireDoorRotation, 0>
                    }
                #else
                    #local SpireDoorHeightZ = 0;
                    #local SpireDoorRotation = 0;
                #end

            }

            #if (SpireDoorHeightZ > 0)
                object {
                    intersection {
                        object { MakeSpireDoorPerch(SpireRadius+WALL*3) }
                        cone { 0, SpireRadius+WALL*3, <0, spire, 0>, SpireRadius+WALL }
                    }
                    translate <0, SpireDoorHeightZ, 0>
                    rotate <0, SpireDoorRotation, 0>
                }
            #end

            texture { DefaultTexture }
        }

        #local RoofHeight=1+3*rand(R1);

        object { // conical roof
            difference {
                superellipsoid {
                    <1.0, 2.5>
                    rotate<90, 0, 0>
                }
                plane { y, 0 }
            }
            scale <SpireRadius*1.6, RoofHeight, SpireRadius>
            translate <0, +spire, 0>
            texture { HighlightPigment }
        }

        #local PoleHeight=HEIGHT*0.25;

        object { // flagpole
            cylinder {
                <0, +spire+RoofHeight, 0>, <0, +spire+RoofHeight+PoleHeight, 0>, 0.01
            }
            texture { DefaultTexture }
        }

        #local FlagHeight=PoleHeight*0.66;
        #local FlagLength=2+2*rand(RT);
        #local WindStrength = 15 + 10*rand(RT);

        object { // flag
            intersection {
                cone {
                    <0, +spire+RoofHeight+PoleHeight-FlagHeight/2, 0>, FlagHeight*0.5,
                    <FlagLength, +spire+RoofHeight+PoleHeight-FlagHeight/2, 0>, 0
                    scale <1, 1, 20>
                }

                isosurface {
                    function { z - sin(x * WindStrength) / WindStrength }
                    threshold 0
                    contained_by {
                        box {
                            <0, +spire+RoofHeight+PoleHeight-FlagHeight, -1/WindStrength>,
                            <FlagLength, +spire+RoofHeight+PoleHeight, +1/WindStrength>
                        }
                    }
                    open
                }
            }
            rotate <0, WIND, 0>
            texture { HighlightPigment }
        }

        translate <X, Z, Y>
    }

#end

#macro MakeCourtyard (X, Y, Z, W, L)
#end

#macro MakeTower (X, Y, Z, W, L)
    #local tower = HEIGHT + 1.5 + 4*rand(R1)*rand(R1)*rand(R1);
    superellipsoid {
        <0.25, 0.50>
        rotate<90, 0, 0>
        translate <1, 1, 1>
        scale 0.5
        scale <W, 1, L>
        translate <0, tower-0.5, 0>

        translate <X, Z, Y>
        texture { HighlightPigment }
    }
    #local LowestDoorHeight=HEIGHT+WALL*2;
    union {
        difference {
            superellipsoid {
                <0.200, 0.001>
                rotate<90, 0, 0>
                translate <1, 1, 1>
                scale 0.5
                scale <W+WALL*3, tower, L+WALL*3>
                translate <-WALL*1.5, 0, -WALL*1.5>
            }

            #local SpireDoorSpace = (tower - SpireDoorHeightTotal - WALL) - LowestDoorHeight;
            #if (rand(R1) < 0.75 & rand(R1) < SpireDoorSpace)
                #local XSpireDoorHeightZ = LowestDoorHeight + rand(R1) * SpireDoorSpace;
                #local XSpireDoorY = rand(R1) * L;
                object {
                    MakeSpireDoor(W+WALL*3)
                    translate <0, XSpireDoorHeightZ, XSpireDoorY>
                }
            #else
                #local XSpireDoorHeightZ = 0;
                #local XSpireDoorY = 0;
            #end
            #if (rand(R1) < 0.75 & rand(R1) < SpireDoorSpace)
                #local YSpireDoorHeightZ = LowestDoorHeight + rand(R1) * SpireDoorSpace;
                #local YSpireDoorX = rand(R1) * W;
                object {
                    MakeSpireDoor(L+WALL*3)
                    rotate <0, 90, 0>
                    translate <YSpireDoorX, YSpireDoorHeightZ, 0>
                }
            #else
                #local YSpireDoorHeightZ = 0;
                #local YSpireDoorX = 0;
            #end
        }

        #if (XSpireDoorHeightZ > 0)
        intersection {
            box { <-WALL*2, 0, -WALL*2>, <W+WALL*2, tower, L+WALL*2> }
            object {
                MakeSpireDoorPerch(W+WALL*3)
                translate <0, XSpireDoorHeightZ, XSpireDoorY>
            }
        }
        #end
        #if (YSpireDoorHeightZ > 0)
        intersection {
            box { <-WALL*2, 0, -WALL*2>, <W+WALL*2, tower, L+WALL*2> }
            object {
                MakeSpireDoorPerch(L+WALL*3)
                rotate <0, 90, 0>
                translate <YSpireDoorX, YSpireDoorHeightZ, 0>
            }
        }
        #end
        translate <X, Z, Y>
        texture { DefaultTexture }
    }
#end

#macro MakeStair (X, Y, Z, W, L)
    object {
        STAIR
        rotate y*degrees(atan2(L, W))
        translate <X, Z, Y>
        pigment { White }
    }
#end

{% for cmd,coords in parts -%}
{{ cmd }}({{ coords[0] }}, {{ coords[1] }}, {{ coords[2] }})
{% endfor %}

{% for cmd,coords,dims in blocks -%}
{{ cmd }}({{ coords[0] }}, {{ coords[1] }}, {{ coords[2] }}, {{ dims[0] }}, {{ dims[1] }})
{% endfor %}
