#version 3.7
#include "colors.inc"
#include "stones2.inc"
#include "textures.inc"
background { color Black }

#declare HEIGHT=3.5;
#declare FENCE=1.0;
#declare R1=seed(1);
#declare RT=seed({{ seed }});
#declare WALL=0.25;
#declare HALL=1-2*WALL;
#declare STAIRCOUNT = 5;
#declare WIND=rand(RT);

camera {
    right x*image_width/image_height // Square pixels
    rotate <20-40*rand(RT), 0, 0>
    location <10, 10, 10>
    look_at  <1, 1, 1>
    focal_point <3, 3, 3>
    aperture 10*rand(RT)
}
light_source { <-30, 200, 140> color White }

global_settings {
    assumed_gamma 1.0
    radiosity {
      pretrace_start 0.08
      pretrace_end   0.01
      count 150
      nearest_count 10
      error_bound 0.5
      recursion_limit 3
      low_error_factor 0.5
      gray_threshold 0.0
      minimum_reuse 0.005
      maximum_reuse 0.2
      brightness 1
      adc_bailout 0.005
    }
  }

//#declare DefaultTexture = texture { pigment { White } }

#declare DefaultTexture = texture { T_Stone34 scale 0.15 }

#declare HighlightPigment = pigment { rgb CHSV2RGB(<360*rand(RT), 1.0, 1.0>) }

plane { y, 0 texture { DefaultTexture } }

#if (rand(RT) < 0.50)
    plane { y, HEIGHT*rand(RT) texture { Water } }
#end

#declare STAIR = union {
    #local xmax=0.5-WALL;
    #local ymax=HEIGHT+0.75*WALL;
    #local zmax=WALL/2;

    cylinder { <0, 0, -zmax>, <xmax, ymax, -zmax>, 0.02 }
    cylinder { <0, 0, +zmax>, <xmax, ymax, +zmax>, 0.02 }
    cylinder {
        <xmax * (1 - 1 / 20), ymax * (1 - 1 / 20), -zmax>,
        <xmax * (1 - 1 / 20), ymax * (1 - 1 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 2 / 20), ymax * (1 - 2 / 20), -zmax>,
        <xmax * (1 - 2 / 20), ymax * (1 - 2 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 3 / 20), ymax * (1 - 3 / 20), -zmax>,
        <xmax * (1 - 3 / 20), ymax * (1 - 3 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 4 / 20), ymax * (1 - 4 / 20), -zmax>,
        <xmax * (1 - 4 / 20), ymax * (1 - 4 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 5 / 20), ymax * (1 - 5 / 20), -zmax>,
        <xmax * (1 - 5 / 20), ymax * (1 - 5 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 6 / 20), ymax * (1 - 6 / 20), -zmax>,
        <xmax * (1 - 6 / 20), ymax * (1 - 6 / 20), +zmax>, 0.02
    }
    cylinder {
        <xmax * (1 - 7 / 20), ymax * (1 - 7 / 20), -zmax>,
        <xmax * (1 - 7 / 20), ymax * (1 - 7 / 20), +zmax>, 0.02
    }
    texture { Cherry_Wood }
}

#macro MakeWallX (X, Y, Z)
    box {
        <-WALL, +0, -WALL>, <+1+WALL, +HEIGHT, +WALL>
        texture { DefaultTexture }
        translate <X, Z, Y>
    }
#end

#macro MakeWallY (X, Y, Z)
    box {
        <-WALL, +0, -WALL>, <+WALL, +HEIGHT, +1+WALL>
        texture { DefaultTexture }
        translate <X, Z, Y>
    }
#end

#macro MakeArchX (X, Y, Z)
    difference {
        cylinder {
            <+0.5, +HEIGHT-0.2-HALL/2, -WALL>,
            <+0.5, +HEIGHT-0.2-HALL/2, +WALL>, HALL/2+WALL*1.5
        }
        cylinder {
            <+0.5, +HEIGHT-0.2-HALL/2, -WALL*1.1>,
            <+0.5, +HEIGHT-0.2-HALL/2, +WALL*1.1>, HALL/2
        }
        plane {
            y, +HEIGHT-0.2-HALL/2
        }

        texture { DefaultTexture }
        translate <X, Z, Y>
    }
#end

#macro MakeArchY (X, Y, Z)
    difference {
        cylinder {
            <-WALL, +HEIGHT-0.2-HALL/2, +0.5>,
            <+WALL, +HEIGHT-0.2-HALL/2, +0.5>, HALL/2+WALL*1.5
        }
        cylinder {
            <-WALL*1.1, +HEIGHT-0.2-HALL/2, +0.5>,
            <+WALL*1.1, +HEIGHT-0.2-HALL/2, +0.5>, HALL/2
        }
        plane {
            y, +HEIGHT-0.2-HALL/2
        }

        texture { DefaultTexture }
        translate <X, Z, Y>
    }
#end

#macro MakeOpenX (X, Y, Z)
#end

#macro MakeOpenY (X, Y, Z)
#end

#macro MakeBlockX (X, Y, Z)
    box { <X-WALL, Z+0, Y-WALL>, <X+WALL, Z+HEIGHT, Y+WALL> texture { DefaultTexture } }
    box { <X+0.15, Z+0, Y-0.05>, <X+0.25, Z+FENCE, Y+0.05> texture { DefaultTexture } }
    box { <X+0.35, Z+0, Y-0.05>, <X+0.45, Z+FENCE, Y+0.05> texture { DefaultTexture } }
    box { <X+0.55, Z+0, Y-0.05>, <X+0.65, Z+FENCE, Y+0.05> texture { DefaultTexture } }
    box { <X+0.75, Z+0, Y-0.05>, <X+0.85, Z+FENCE, Y+0.05> texture { DefaultTexture } }
    box { <X+1-WALL, Z+0, Y-WALL>, <X+1+WALL, Z+HEIGHT, Y+WALL> texture { DefaultTexture } }
#end

#macro MakeBlockY (X, Y, Z)
    box { <X-WALL, Z+0, Y-WALL>, <X+WALL, Z+HEIGHT, Y+WALL> texture { DefaultTexture } }
    box { <X-0.05, Z+0, Y+0.15>, <X+0.05, Z+FENCE, Y+0.25> texture { DefaultTexture } }
    box { <X-0.05, Z+0, Y+0.35>, <X+0.05, Z+FENCE, Y+0.45> texture { DefaultTexture } }
    box { <X-0.05, Z+0, Y+0.55>, <X+0.05, Z+FENCE, Y+0.65> texture { DefaultTexture } }
    box { <X-0.05, Z+0, Y+0.75>, <X+0.05, Z+FENCE, Y+0.85> texture { DefaultTexture } }
    box { <X-WALL, Z+0, Y+1-WALL>, <X+WALL, Z+HEIGHT, Y+1+WALL> texture { DefaultTexture } }
#end

#declare SpireRadius=0.6;

#macro MakeSpire (X, Y, Z)

    #local spire = HEIGHT + 1 + 1.5*HEIGHT*rand(R1);
    #local notch = 0.5;

    union {
        object { // tower
            difference {
                cone { 0, SpireRadius+WALL, <0, spire, 0>, SpireRadius-WALL }
                box { <-WALL, +HEIGHT, -SpireRadius*2>, <+WALL, +HEIGHT+notch, +SpireRadius*2> }
                box { <-SpireRadius*2, +HEIGHT, -WALL>, <+SpireRadius*2, +HEIGHT+notch, +WALL> }
                cylinder { <-SpireRadius*2, +HEIGHT+notch, 0>, <+SpireRadius*2, +HEIGHT+notch, 0>, WALL }
                cylinder { <0, +HEIGHT+notch, -SpireRadius*2>, <0, +HEIGHT+notch, +SpireRadius*2>, WALL }
            }
            texture { DefaultTexture }
        }

        #local RoofHeight=1+3*rand(R1);

        object { // conical roof
            difference {
                superellipsoid {
                    <1.0, 2.5>
                    rotate<90, 0, 0>
                }
                plane { y, 0 }
            }
            scale <SpireRadius*1.6, RoofHeight, SpireRadius>
            translate <0, +spire, 0>
            texture { HighlightPigment }
        }

        #local PoleHeight=HEIGHT*0.25;

        object { // flagpole
            cylinder {
                <0, +spire+RoofHeight, 0>, <0, +spire+RoofHeight+PoleHeight, 0>, 0.01
            }
            texture { DefaultTexture }
        }

        #local FlagHeight=PoleHeight*0.66;
        #local FlagLength=2+2*rand(RT);
        #local WindStrength = 15 + 10*rand(RT);

        object { // flag
            intersection {
                cone {
                    <0, +spire+RoofHeight+PoleHeight-FlagHeight/2, 0>, FlagHeight*0.5,
                    <FlagLength, +spire+RoofHeight+PoleHeight-FlagHeight/2, 0>, 0
                    scale <1, 1, 20>
                }

                isosurface {
                    function { z - sin(x * WindStrength) / WindStrength }
                    threshold 0
                    contained_by {
                        box {
                            <0, +spire+RoofHeight+PoleHeight-FlagHeight, -1/WindStrength>,
                            <FlagLength, +spire+RoofHeight+PoleHeight, +1/WindStrength>
                        }
                    }
                    open
                }
            }
            rotate <0, WIND, 0>
            texture { HighlightPigment }
        }

        translate <X, Z, Y>
    }

#end

#macro MakeCourtyard (X, Y, Z, W, L)
#end

#macro MakeTower (X, Y, Z, W, L)
    #local tower = HEIGHT + 1.5 + 4*rand(R1)*rand(R1)*rand(R1);
    union {
        superellipsoid {
            <0.200, 0.001>
            rotate<90, 0, 0>
            translate <1, 1, 1>
            scale 0.5
            scale <W+WALL*3, tower, L+WALL*3>
            translate <-WALL*1.5, 0, -WALL*1.5>
            texture { DefaultTexture }
        }
        superellipsoid {
            <0.25, 0.50>
            rotate<90, 0, 0>
            translate <1, 1, 1>
            scale 0.5
            scale <W, 1, L>
            translate <0, tower-0.5, 0>
            texture { HighlightPigment }
        }
        translate <X, Z, Y>
    }
#end

#macro MakeStair (X, Y, Z, W, L)
    object {
        STAIR
        rotate y*degrees(atan2(L, W))
        translate <X, Z, Y>
        pigment { White }
    }
#end

{% for cmd,coords in parts -%}
{{ cmd }}({{ coords[0] }}, {{ coords[1] }}, {{ coords[2] }})
{% endfor %}

{% for cmd,coords,dims in blocks -%}
{{ cmd }}({{ coords[0] }}, {{ coords[1] }}, {{ coords[2] }}, {{ dims[0] }}, {{ dims[1] }})
{% endfor %}
